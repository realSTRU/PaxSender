@page "/Seguimientos"

<PageTitle>Seguimiento.</PageTitle>

@inject ArticuloBLL Articulos
@inject EntradaBLL Entradas
@inject SalidaBLL Salidas
@inject ClienteBLL ClienteBLL
@inject SucursalBLL SucursalBLL
@inject AlmacenBLL AlmacenBLL
@inject EnvioBLL EnvioBLL
@inject PedidoBLL Pedidos
@inject NotificationService Notify
@inject SuplidorBLL suplidores

<head>
    <style>
        .hidden{
            display: none;
        }

        .form-select{
            border: none;
            width: 150px;
        }
        .form-floating {
            width: 15%;
        }
            .Entrada{
        display: flex;
        padding: 5px;
        align-items: center;
        width: 100%;
    }
    .Entrada input{
        border-radius: 50px;
        background-color:#D9D9D9;
        border-color: #D9D9D9;
        border: 15px;
        width: 100%;
    }
    .Entrada label
    {
        margin: 5px;
    }
    .Entrada textarea{
        background-color:#D9D9D9;
        border-color: #D9D9D9;
        border-radius: 15px;
        width: 100%;
    }
       


    </style>
</head>
<body>
    <RadzenCard class="rz-shadow-7 rz-my-12 rz-mx-auto rz-p-4 rz-p-md-12">
    <RadzenFieldset>
            <HeaderTemplate>
            <span class="d-inline-flex align-items-center align-middle">
                <RadzenIcon Icon="local_shipping" class="me-1" /><b>(Estado/Seguimiento/Monitoreo) de servicios y articulos .</b>
            </span>
        </HeaderTemplate>
        <ChildContent>

<RadzenTabs>
    <Tabs>
        
        <RadzenTabsItem Text="Estado de la compra" >
            <div style="display:flex; justify-items:center;">
        <div class="Entrada" style="display:flex; justify-items:center;">
            <label for="PedidoId">Pedido#</label>
            <RadzenNumeric type="PedidoId" id="PedidoId"  Disabled="true" @bind-Value="pedido.PedidoId" name="Descripcion"/>
        </div>
        
        <div class="input-group Entrada"style="display:flex; justify-items:center;">
            
            <div class="input-group ">
                <label for="Compra">Estado Actual</label>
                <select class ="form-select"id="Compra" name="Compra" @bind="pedido.Estado">
                    @foreach (var item in Estados)
                    {
                        <option value="@item"> @item</option>
                    }

                </select>
                <RadzenButton ButtonStyle="ButtonStyle.Secondary" Click="CambiarEstado" ><RadzenIcon Icon="done" /></RadzenButton>
            </div>
            
        </div>
        </div>

        <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced"
        AllowGrouping="true" AllowSorting="true" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left"
        Data="Pedidos.GetList()" TItem="Pedido" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" ShowPagingSummary="true">

            <Columns>
                    <RadzenDataGridColumn Filterable="false" Sortable="false" TItem="Pedido" Frozen="true" Title="Acciones">
                <Template Context="Item">
                    <button @onclick="() => Buscar(Item.PedidoId)" style="border:none;" ><RadzenBadge  BadgeStyle="BadgeStyle.Info"  Text="Seleccionar"   /></button>
                </Template>
                    </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Pedido" Property="PedidoId" Title="PedidoId#" />
                <RadzenDataGridColumn TItem="Pedido" Property="Fecha" Title="Fecha" />
                <RadzenDataGridColumn TItem="Pedido" Property="Estado" Title="Estado compra." />
                
            </Columns>

        </RadzenDataGrid>
        

        </RadzenTabsItem >
        <RadzenTabsItem Text="Estado de los envios" >
            <div style="display:flex; justify-items:center;">
            <div class="Entrada" style="display:flex; justify-items:center;">
                <label for="PedidoId">Envio#</label>
                <RadzenNumeric type="EnvioId" id="EnvioId"  Disabled="true" @bind-Value="envio.EnvioId" name="Id"/>
            </div>
            
            <div class="input-group Entrada"style="display:flex; justify-items:center;">
                
                <div class="input-group ">
                    <label for="Compra">Estado Actual</label>
                    <select class ="form-select"id="envio" name="envio" @bind="envio.Estado">
                        @foreach (var item in EstadosE)
                        {
                            <option value="@item"> @item</option>
                        }

                    </select>
                    <RadzenButton ButtonStyle="ButtonStyle.Secondary" Click="CambiarEstadoE" ><RadzenIcon Icon="done" /></RadzenButton>
                </div>
                
            </div>
            </div>

            <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced"
            AllowGrouping="true" AllowSorting="true" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left"
            Data="EnvioBLL.GetList()" TItem="Envio" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" ShowPagingSummary="true">

                <Columns>
                        <RadzenDataGridColumn Filterable="false" Sortable="false" TItem="Envio" Frozen="true" Title="Acciones">
                    <Template Context="Item">
                        <button @onclick="() => BuscarE(Item.EnvioId)" style="border:none;" ><RadzenBadge  BadgeStyle="BadgeStyle.Info"  Text="Seleccionar"   /></button>
                    </Template>
                        </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Envio" Property="EnvioId" Title="EnvioId#" />
                    <RadzenDataGridColumn TItem="Envio" Filterable="true" Sortable="true"  Frozen="false" Title="Sucursal">
                                <Template Context="Item">
                                    <RadzenText>@((SucursalBLL.Buscar(Item.SucursalId)).Nombre)</RadzenText>
                                </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="Envio" Property="Destino" Title="Destino" />
                    <RadzenDataGridColumn TItem="Envio" Property="Destinatario_Referencia" Title="Referencia" />
                    <RadzenDataGridColumn TItem="Envio" Property="Total_Envio" Title="Precio Envio" />
                    <RadzenDataGridColumn TItem="Envio" Property="Fecha" Title="Fecha" />
                    <RadzenDataGridColumn TItem="Envio" Property="Estado" Title="Estado envio." />
                        
                </Columns>

            </RadzenDataGrid>
            

        </RadzenTabsItem >
        <RadzenTabsItem Text="PERECEDEROS" >
            <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced"
                    AllowGrouping="true" AllowSorting="true" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left"
                    Data="Articulos.GetListPerecederos()" TItem="Articulo" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or"
                    ShowPagingSummary="true">

                    <Columns>
                        <RadzenDataGridColumn TItem="Articulo" Filterable="false" Sortable="false"  Frozen="true" Title="Acciones">
                        <Template Context="Item">
                            <RadzenLink Path=@($"R_Articulos/{Item.ArticuloId}") Text="Ver" ><RadzenBadge BadgeStyle="BadgeStyle.Secondary" Text="Ver" /></RadzenLink>
                        </Template>
                    </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Articulo" Property="ArticuloId" Title="ArticuloId#" />
                        <RadzenDataGridColumn TItem="Articulo" Property="Descripcion" Title="Descripcion" />
                        <RadzenDataGridColumn TItem="Articulo" Filterable="true" Sortable="true"  Frozen="false" Title="Almacen">
                            <Template Context="Item">
                                <RadzenText>@((AlmacenBLL.Buscar(Item.AlmacenId)).Identificador)</RadzenText>
                            </Template>
                         </RadzenDataGridColumn>
                         <RadzenDataGridColumn TItem="Articulo" Filterable="true" Sortable="true"  Frozen="false" Title="Suplidor">
                            <Template Context="Item">
                                <RadzenText>@((suplidores.Buscar(Item.SuplidorId)).Nombre)</RadzenText>
                            </Template>
                         </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Articulo" Property="CategoriaId" Title="Categoria" />
                        <RadzenDataGridColumn TItem="Articulo" Property="Peso" Title="Peso" />
                        <RadzenDataGridColumn TItem="Articulo" Property="Costo" Title="Costo" />
                        <RadzenDataGridColumn TItem="Articulo" Property="Precio" Title="Precio" />
                        <RadzenDataGridColumn TItem="Articulo" Property="Existencia" Title="Existencia" />
                        <RadzenDataGridColumn TItem="Articulo" Property="Estado" Title="Estado" />
                        <RadzenDataGridColumn TItem="Articulo" Property="Fecha_Caducidad" Title="Fecha Caducidad" />
                    </Columns>

                </RadzenDataGrid>
            
            

        </RadzenTabsItem >

        </Tabs>
    </RadzenTabs>




    </ChildContent>
    </RadzenFieldset>
    </RadzenCard>
    </body>

@code {

    [Parameter]
    public int PedidoId {get; set;}
    public Pedido pedido {get; set;} = new Pedido();

    public Envio envio {get; set;} = new Envio();
    public Salida salida { get; set; } = new Salida();
    public Entrada entrada { get; set; } = new Entrada();
    
    public string Estado {get; set;}
    List<ESTADOPEDIDO> Estados = Enum.GetValues(typeof(ESTADOPEDIDO))
    .Cast<ESTADOPEDIDO>()
    .ToList();

    List<ESTADOENVIO> EstadosE = Enum.GetValues(typeof(ESTADOENVIO))
    .Cast<ESTADOENVIO>()
    .ToList();

    public List<Articulo> _Articulos {get; set;} = new List<Articulo>();

    protected override void OnInitialized()
    {
            _Articulos = Articulos.GetList(o=> true);
    }
    

    void ShowNotification(NotificationMessage message)
    {
        Notify.Notify(message);
    }

    private void Buscar(int Id)
    {
        var pedidoEncontrado = Pedidos.Buscar(Id);
        if (pedidoEncontrado != null)
        {
            
            this.pedido = pedidoEncontrado;

        }
        
    }

    private void BuscarE(int Id)
    {
        var envioEncontrado = EnvioBLL.Buscar(Id);
        if (envioEncontrado != null)
        {
            
            this.envio =envioEncontrado;

        }
        
    }

    void CambiarEstado()
    {
        
        
        if(Validar())
        {
            if(this.pedido.Estado.Contains("LIQUIDADO"))
            {

                foreach(var item in this.pedido.DetallePedido )
                {
                    entrada.Razon = "Articulo comprado";
                    entrada.Cantidad = item.Cantidad;
                    entrada.cantidad_anterior = Articulos.Buscar(item.ArticuloId).Existencia;
                    entrada.ArticuloId = item.ArticuloId;
                    entrada.cantidad_Resultante = item.Cantidad + entrada.cantidad_anterior;
                    Entradas.Insertar(entrada);
                    this.entrada = new Entrada();

                }
                Pedidos.Guardar(this.pedido);
                Notify.ShowNotification(
                        titulo: "Cambio de estado!",
                        mensaje: "Realizado con exito",
                        NotificationSeverity.Error);
            }
            else
            {
                Pedidos.Guardar(this.pedido);
                Notify.ShowNotification(
                        titulo: "Cambio de estado!",
                        mensaje: "Realizado con exito",
                        NotificationSeverity.Error);
                
                
                
            
            }

        }
        else
        {
            Notify.ShowNotification(
                        titulo: "Error",
                        mensaje: "No fue posible cambiar el estado, Revise los campos",
                        NotificationSeverity.Error);
        }

        

    }
    
    void CambiarEstadoE()
    {
        
        
        if(ValidarE())
        {
            if(this.pedido.Estado.Contains("LIQUIDADO"))
            {

                
                EnvioBLL.Guardar(this.envio);
                Notify.ShowNotification(
                        titulo: "Cambio de estado!",
                        mensaje: "Realizado con exito",
                        NotificationSeverity.Success);
            }
            else
            {
                EnvioBLL.Guardar(this.envio);
                Notify.ShowNotification(
                        titulo: "Cambio de estado!",
                        mensaje: "Realizado con exito",
                        NotificationSeverity.Success);
                
                
                
            
            }

        }
        else
        {
            Notify.ShowNotification(
                        titulo: "Error",
                        mensaje: "No fue posible cambiar el estado, Revise los campos",
                        NotificationSeverity.Error);
        }

        

    }
    public bool Validar() 
    {
        var pedidoEncotrado = Pedidos.Buscar(pedido.PedidoId);
        return pedidoEncotrado!= null;
    }  

    public bool ValidarE() 
    {
        var envioEncontrado = EnvioBLL.Buscar(envio.EnvioId);
        return envioEncontrado!= null;
    }  

   
}