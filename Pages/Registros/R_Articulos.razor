@page "/R_Articulos"
@page "/R_Articulos/{ArticuloId:int}"

@inject ArticuloBLL articuloBLL
@inject CategoriaBLL categoriaBLL
@inject NotificationService Notify

<EditForm Model="articulo" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header">
                <h3>Registro de Articulos</h3>
            </div>
            <div class="card-body">
                @*SistemaId*@
                <div class="col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4">
                    <div class="input-group mb-3">
                        <InputNumber @bind-Value="articulo.ArticuloId" class="form-control" aria-describedby="buscarButton" />
                        <button @onclick="Buscar" class="btn btn-outline-primary" type="button" id="buscarButton">
                            <i class="oi oi-magnifying-glass" />
                        </button>
                    </div>
                </div>

                @*Descripcion*@
                <div class="mb-3">
                    <label class="form-label">Descripci&oacute;n</label>
                    <InputText @bind-Value="articulo.Descripcion" class="form-control" />
                </div>

                 @*Categoria*@
                <label for="SelectP">Categoria</label>
                    <select @bind ="articulo.CategoriaId"class="form-select">
                        @foreach(var item in L_Categorias)
                        {
                          <option value="@item.CategoriaId">@item.Descripcion</option>
                        }
                    </select>

                 @*Costo*@
                <div class="mb-3">
                    <label class="form-label">Costo</label>
                    <RadzenNumeric ShowUpDown="false" @bind-Value="articulo.Costo" class="form-control" />
                </div>

                 @*Precio*@
                <div class="mb-3">
                    <label class="form-label">Precio</label>
                    <RadzenNumeric ShowUpDown="false" @bind-Value="articulo.Precio" class="form-control" />
                </div>

                 @*Fecha_Caducidad*@
                 <div class="mb-3"
                   <RadzenLabel  for="fecha-caducidad">Fecha Caducidad</RadzenLabel>
                   <br>
                   <RadzenDatePicker @bind-Value=@articulo.Fecha_Caducidad ShowTime="true" HourFormat="12" DateFormat="MM/dd/yyyy h:mm tt" Name="Fecha" />
                 </div>
                   @*<RadzenRequiredValidator Component="Fecha" Text="Nombre es Campo Requerido" Popup=true Style="position: absolute"/>*@


            </div>

            <div class="card-footer d-flex justify-content-center">
                <div class="btn-group" role="group">
                    <button type="button" class="btn btn-primary" @onclick="Nuevo"> <i class="oi oi-file" /> Nuevo</button>
                    <button type="submit" class="btn btn-success"> <i class="oi oi-document" /> Guardar</button>
                    <button type="button" class="btn btn-danger" @onclick="Eliminar"><i class="oi oi-trash" /> Eliminar</button>
                </div>
            </div>
        </div>
    </div>

</EditForm>

@code {
    [Parameter]
    public int? ArticuloId { get; set; }
    public Articulo articulo { get; set; } = new Articulo();

    public List<Categoria> L_Categorias = new List<Categoria>();

    protected override void OnInitialized()
    {
        if (ArticuloId.HasValue)
        {
            // si recibimos un {SistemaId:int} por parametro asignarlo
            // y luego buscarla para que se vea en pantalla
            articulo.ArticuloId = ArticuloId.Value;
            Buscar();
        }

        L_Categorias = categoriaBLL.GetList(c => true);


        
    }
    public void Buscar()
    {
        var articuloEncontrado = articuloBLL.Buscar(articulo.ArticuloId);
        if (articuloEncontrado != null)
        {
            articulo = articuloEncontrado;
        }
        else
        {
            Notify.ShowNotification(
            titulo: "Error de Busqueda",
            mensaje: "Registro no encontrado",
            NotificationSeverity.Error);
        }
    }

    public void Nuevo()
    {
        this.articulo = new Articulo();
    }

    public void Guardar()
    {
        if (!Validar())
        {
            Notify.ShowNotification(
                titulo: "Validaci√≥n",
                mensaje: "Error Revise los campos",
                NotificationSeverity.Error);
            return;
        }

        var guardo = articuloBLL.Guardar(this.articulo);
        if (guardo)
        {
            Notify.ShowNotification(
                titulo: "Exito",
                mensaje: "Guardado correctamente!",
                NotificationSeverity.Success);
            Nuevo();
        }
        else
        {
            Notify.ShowNotification(
                titulo: "Error",
                mensaje: "Ocurrio un error y no fue posible guardar",
                NotificationSeverity.Error);
        }
    }

    public void Eliminar()
    {
        Buscar();
        if (articuloBLL.Eliminar(this.articulo))
        {
            Notify.ShowNotification(
                titulo: "Exito",
                mensaje: "Eliminado con Exito",
                NotificationSeverity.Success);
            Nuevo();
        }
        else
        {
            Notify.ShowNotification(
                titulo: "Error",
                mensaje: "Ocurrio un error y no fue posible eliminar",
                NotificationSeverity.Error);
        }

    }

    bool Validar()
    {
        //todo: Validar que el nombre del sistema no este repetido.
        return true;
    }

}