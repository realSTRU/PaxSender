@page "/R_Clientes"
@page "/R_Clientes/{ClienteId:int}"

@inject ClienteBLL clienteBLL
@inject NotificationService Notify

<EditForm Model="cliente" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header">
                <h3>Registro de clientes</h3>
            </div>
            <div class="card-body">
                @*SistemaId*@
                <div class="col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4">
                    <div class="input-group mb-3">
                        <InputNumber @bind-Value="cliente.ClienteId" class="form-control" aria-describedby="buscarButton" />
                        <button @onclick="Buscar" class="btn btn-outline-primary" type="button" id="buscarButton">
                            <i class="oi oi-magnifying-glass" />
                        </button>
                    </div>
                </div>

                @*Nombre*@
                <div class="mb-3">
                    <label class="form-label">Nombre</label>
                    <InputText @bind-Value="cliente.Nombre" class="form-control" />
                    <ValidationMessage For="@(() => cliente.Nombre)" />
                </div>

                 @*Celular*@
                <div class="mb-3">
                    <label class="form-label">Celular</label>
                    <InputText @bind-Value="cliente.Celular" class="form-control" />
                    <ValidationMessage For="@(() => cliente.Celular)" />
                </div>

                 @*Teléfono*@
                <div class="mb-3">
                    <label class="form-label">Tel&eacute;fono</label>
                    <InputText @bind-Value="cliente.Telefono" class="form-control" />
                    <ValidationMessage For="@(() => cliente.Telefono)" />
                </div>

                 @*Dirección*@
                <div class="mb-3">
                    <label class="form-label">Direcci&oacute;n</label>
                    <InputText @bind-Value="cliente.Direccion" class="form-control" />
                    <ValidationMessage For="@(() => cliente.Direccion)" />
                </div>

                 @*Cedula*@
                <div class="mb-3">
                    <label class="form-label">Cedula</label>
                    <InputText @bind-Value="cliente.Cedula" class="form-control" />
                    <ValidationMessage For="@(() => cliente.Cedula)" />
                </div>

                 @*Correo*@
                <div class="mb-3">
                    <label class="form-label">Correo</label>
                    <InputText @bind-Value="cliente.Correo" class="form-control" />
                    <ValidationMessage For="@(() => cliente.Correo)" />
                </div>

                 @*RNC*@
                <div class="mb-3">
                    <label class="form-label">RNC</label>
                    <InputText @bind-Value="cliente.RNC" class="form-control" />
                    <ValidationMessage For="@(() => cliente.RNC)" />
                </div>

            </div>

            <div class="card-footer d-flex justify-content-center">
                <div class="btn-group" role="group">
                    <button type="button" class="btn btn-primary" @onclick="Nuevo"> <i class="oi oi-file" /> Nuevo</button>
                    <button type="submit" class="btn btn-success"> <i class="oi oi-document" /> Guardar</button>
                    <button type="button" class="btn btn-danger" @onclick="Eliminar"><i class="oi oi-trash" /> Eliminar</button>
                </div>
            </div>
        </div>
    </div>

</EditForm>

@code {
    [Parameter]
    public int? ClienteId { get; set; }
    public Cliente cliente { get; set; } = new Cliente();

    protected override void OnInitialized()
    {
        if (ClienteId.HasValue)
        {
            // si recibimos un {SistemaId:int} por parametro asignarlo
            // y luego buscarla para que se vea en pantalla
            cliente.ClienteId = ClienteId.Value;
            Buscar();
        }
    }
    public void Buscar()
    {
        var clienteEncontrado = clienteBLL.Buscar(cliente.ClienteId);
        if (clienteEncontrado != null)
        {
            cliente = clienteEncontrado;
        }
        else
        {
            Notify.ShowNotification(
            titulo: "Error de Busqueda",
            mensaje: "Registro no encontrado",
            NotificationSeverity.Error);
        }
    }

    public void Nuevo()
    {
        this.cliente = new Cliente();
    }

    public void Guardar()
    {
        if (!Validar())
        {
            Notify.ShowNotification(
                titulo: "Validación",
                mensaje: "Error Revise los campos",
                NotificationSeverity.Error);
            return;
        }

        var guardo = clienteBLL.Guardar(this.cliente);
        if (guardo)
        {
            Notify.ShowNotification(
                titulo: "Exito",
                mensaje: "Guardado correctamente!",
                NotificationSeverity.Success);
            Nuevo();
        }
        else
        {
            Notify.ShowNotification(
                titulo: "Error",
                mensaje: "Ocurrio un error y no fue posible guardar",
                NotificationSeverity.Error);
        }
    }

    public void Eliminar()
    {
        Buscar();
        if (clienteBLL.Eliminar(this.cliente))
        {
            Notify.ShowNotification(
                titulo: "Exito",
                mensaje: "Eliminado con Exito",
                NotificationSeverity.Success);
            Nuevo();
        }
        else
        {
            Notify.ShowNotification(
                titulo: "Error",
                mensaje: "Ocurrio un error y no fue posible eliminar",
                NotificationSeverity.Error);
        }

    }

    bool Validar()
    {
        //todo: Validar que el nombre del sistema no este repetido.
        return true;
    }

}