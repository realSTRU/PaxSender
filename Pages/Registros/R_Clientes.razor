 @page "/R_Clientes"
@page "/R_Clientes/{ClienteId:int}"

@inject ClienteBLL clienteBLL
@inject NotificationService Notify

<EditForm Model="cliente" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

     <RadzenCard class="rz-shadow-7 rz-my-12 rz-mx-auto rz-p-4 rz-p-md-12">
        <RadzenFieldset>
            <HeaderTemplate>
                <span class="d-inline-flex align-items-center align-middle">
                    <RadzenIcon Icon="person" class="me-1" /><b>Registro de clientes</b>
                </span>
            </HeaderTemplate>
            <ChildContent>

            <RadzenStack>
                    <div class="sml col-3">
                        <label>ClienteId</label>
                        <div class="input-group">
                            <InputNumber @bind-Value="cliente.ClienteId" class="form-control " />
                            <div class="input-group-append">
                                <div class="input-group-append">
                                    <button @onclick="Buscar" class="btn btn-outline-primary" type="button" id="buscarButton">
                            <i class="oi oi-magnifying-glass" />
                        </button>

                                </div>
                            </div>
                            </div>
                            </div>

            <div class="row">
                <div class="col-4">
                    <label>Nombre</label>
                    <input type="text" @bind="cliente.Nombre" required placeholder="Nombre" class="form-control" />
                    <ValidationMessage For="@(() => cliente.Nombre)" />
                </div>
                <div class="col-4">
                    <label>Teléfono</label>
                    <input type="Text" @bind="cliente.Telefono" required placeholder="Teléfono" class="form-control" />
                    <ValidationMessage For="@(() => cliente.Telefono)" />
                </div>
                <div class="col-4">
                    <label>Correo</label>
                    <input @bind="cliente.Correo" required placeholder="Correo" class="form-control" />
                    <ValidationMessage For="@(() => cliente.Correo)" />
                </div>
            </div>

            <div class="row">
                <div class="col-4">
                    <label>Celular</label>
                    <input type="text" @bind="cliente.Celular" placeholder="Celular" class="form-control" />
                    <ValidationMessage For="@(() => cliente.Celular)" />
                </div>
                <div class="col-4">
                    <label>Cédula</label>
                    <input type="text" @bind="cliente.Cedula" placeholder="Cédula" class="form-control" />
                    <ValidationMessage For="@(() => cliente.Cedula)" />
                </div>

                <div class="col-4">
                    <label>Direccion</label>
                    <input type="text" @bind="cliente.Direccion" placeholder="Direccion" class="form-control" />
                    <ValidationMessage For="@(() => cliente.Direccion)" />
                </div>
                
            </div>
             <div class="row d-flex justify-content-around">
                <div class="col-4">
                    <label>RNC</label>
                    <input type="text" @bind="cliente.RNC" placeholder="RNC" class="form-control" />
                    <ValidationMessage For="@(() => cliente.RNC)" />
                </div>
                <div class="col-4">
                        <label>Fecha</label>
                        <input type="date" Disabled @bind="cliente.Fecha_Registro"  class="form-control col-8 bg-fechasColor" />
                    </div>
            </div>
            <br>
            
            </RadzenStack>
            

            

            <RadzenStack>
                <center>
                    <RadzenButton Click="Nuevo"Text="Nuevo" Icon="refresh" ButtonStyle="ButtonStyle.Secondary" />
                    <RadzenButton Click="Guardar"Text="Guardar" Icon="save" ButtonStyle="ButtonStyle.Success" />
                    <RadzenButton Click="Eliminar"Text="Eliminar" Icon="delete" ButtonStyle="ButtonStyle.Danger" />
                </center>
            </RadzenStack>


            </ChildContent>
        </RadzenFieldset>
    </RadzenCard>   
</EditForm>




@code {
    [Parameter]
    public int? ClienteId { get; set; }
    public Cliente cliente { get; set; } = new Cliente();
    private int ultimoClienteId;

    protected override void OnInitialized()
    {
        if (ClienteId.HasValue)
        {
            // si recibimos un {SistemaId:int} por parametro asignarlo
            // y luego buscarla para que se vea en pantalla
            cliente.ClienteId = ClienteId.Value;
            Buscar();
        }
    }
    public void Buscar()
    {
        var clienteEncontrado = clienteBLL.Buscar(cliente.ClienteId);
        if (clienteEncontrado != null)
        {
            cliente = clienteEncontrado;
            Notify.ShowNotification(
            titulo: "Busqueda",
            mensaje: "Registro encontrado con exito!",
            NotificationSeverity.Error);
        }
        else
        {
            Notify.ShowNotification(
            titulo: "Error de Busqueda",
            mensaje: "Registro no encontrado",
            NotificationSeverity.Error);
        }
    }

    public void Nuevo()
    {
        this.cliente = new Cliente();
        Notify.ShowNotification("Limpieza", "Registro Limpiado luego de la acción con exito!", NotificationSeverity.Info);
    }

    //Se inicio a agregar un metodo de control para evitar que se producta una excepcion en el metodo guardar
    public void Guardar()
    {
        try
        {
            if (!Validar())
            {
                Notify.ShowNotification(
                    titulo: "Validación",
                    mensaje: "Error Revise los campos",
                    NotificationSeverity.Error);
                return;
            }

            if(Validar())
            {
                var guardo = clienteBLL.Guardar(this.cliente);
                if (guardo)
                {
                    Notify.ShowNotification(
                        titulo: "Exito",
                        mensaje: "Guardado correctamente!",
                        NotificationSeverity.Success);
                    Nuevo();
                }
                else
                {
                    Notify.ShowNotification(
                        titulo: "Error",
                        mensaje: "Ocurrio un error y no fue posible guardar",
                        NotificationSeverity.Error);
                }
            }
            
        }
        catch (Exception exception) { }
    }

    //Se inicio a agregar un metodo de control para evitar que se producta una excepcion en el metodo eliminar
    public void Eliminar()
    {
        try{
            if(Validar())
            {
                if (clienteBLL.Eliminar(this.cliente))
                {
                    Notify.ShowNotification(
                        titulo: "Exito",
                        mensaje: "Eliminado con Exito",
                        NotificationSeverity.Success);
                    Nuevo();
                }
                
            }
            else
            {
                    Notify.ShowNotification(
                        titulo: "Error",
                        mensaje: "Ocurrio un error y no fue posible eliminar",
                        NotificationSeverity.Error);
            } 
            
        }catch(Exception exception){}
    }

    bool Validar()
    {
        return cliente.Nombre != null && cliente.Direccion != null && cliente.Cedula != null
        && cliente.Celular != null && cliente.Telefono != null;
    }
}