 @page "/R_Categorias"

@page "/R_Categorias/{CategoriaId:int}"
@inject CategoriaBLL categoriaBLL
@inject NotificationService Notify


@* Registro de categoria de productos *@
@inject AuthenticationStateProvider Authentication

<EditForm Model="categoria" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

     <RadzenCard class="rz-shadow-7 rz-my-12 rz-mx-auto rz-p-4 rz-p-md-12">
        <RadzenFieldset>
            <HeaderTemplate>
                <span class="d-inline-flex align-items-center align-middle">
                    <RadzenIcon Icon="category" class="me-1" /><b>Registro de categorias</b>
                </span>
            </HeaderTemplate>
            <ChildContent>

            <RadzenStack>
                <div class="sml col-3">
                        <label>CategoriaId</label>
                        <div class="input-group">
                            <input type="number" @bind="categoria.CategoriaId" class="form-control " />
                            <div class="input-group-append">
                                <div class="input-group-append">
                                    <button @onclick="Buscar" class="btn btn-outline-primary" type="button" id="buscarButton">
                            <i class="oi oi-magnifying-glass" />
                        </button>

                                </div>
                            </div>
                            </div>
                            </div>
        @*...................... Descripcion ......................*@

                <div class="row">

                    <div class="sml col-3">
                        <label>Nombre Categoria</label>
                        <input type="text" required @bind="categoria.Descripcion" placeholder="Descripcion Categoria" class="form-control" />
                        <ValidationMessage For="@(() => categoria.CategoriaId)" />
                    </div>
                    </div>

            </RadzenStack>
            

            

            <RadzenStack>
                <center>
                    <RadzenButton Click="Nuevo"Text="Nuevo" Icon="refresh" ButtonStyle="ButtonStyle.Secondary" />
                    <RadzenButton Click="Guardar"Text="Guardar" Icon="save" ButtonStyle="ButtonStyle.Success" />
                    <RadzenButton Click="Eliminar"Text="Eliminar" Icon="delete" ButtonStyle="ButtonStyle.Danger" />
                </center>
            </RadzenStack>


            </ChildContent>
        </RadzenFieldset>
    </RadzenCard>   
</EditForm>

@code {

  [Parameter]
  public int CategoriaId { get; set; }

  private Categoria categoria = new Categoria();
  public List<Categoria> lista { get; set; } = new List<Categoria>();

  protected override void OnInitialized()
  {
    categoria.CategoriaId = 0;
    if (CategoriaId > 0)
    {
      categoria.CategoriaId = CategoriaId;
      Buscar();
    }
  }
  void Buscar()
  {
    var encontrado = categoriaBLL.Buscar(categoria.CategoriaId);
    if (encontrado != null)
    {
      categoria = encontrado;
      this.categoria = encontrado;
      // notification.ShowNotification("Registro encontrado", NotificationSeverity.Success);
      Notify.ShowNotification(
            titulo: "Busqueda",
            mensaje: "Registro encontrado con exito!",
            NotificationSeverity.Success);
    }
    else
    {
      //otification.ShowNotification("Registro no encontrado", NotificationSeverity.Warning);
      Notify.ShowNotification(
            titulo: "Error de Busqueda",
            mensaje: "Registro no encontrado",
            NotificationSeverity.Error);
    }
  }
  void Nuevo()
  {
    this.categoria = new Categoria();
    //notificacion.ShowNotification("Nueva plantilla.", NotificationSeverity.Success);
    Notify.ShowNotification(
            titulo: "Limpieza",
            mensaje: "Registro limpiado luego de la acci√≥n",
            NotificationSeverity.Info);

  }
  void Guardar()
  {
    try
    {
      if(Validar())
      {
        if (categoriaBLL.Guardar(categoria))
        {
          Nuevo();
          Notify.ShowNotification(
              titulo: "Guardado",
              mensaje: "Registro guardado con exito!",
              NotificationSeverity.Success);
        }
      }
      else
      {
        Notify.ShowNotification(
            titulo: "Error al guardar",
            mensaje: "Revise los campos",
            NotificationSeverity.Error);
      }
    }
    catch (Exception exception) { }
  }
  void Eliminar()
  {
    try
    {
      if(Validar())
      {
        if (categoriaBLL.Eliminar(categoria))
        {
          Nuevo();
          Notify.ShowNotification(
              titulo: "Eliminado",
              mensaje: "Eliminado con exito!",
              NotificationSeverity.Success);
        }
      }
      else
      {
        // notification.ShowNotification("No fue eliminado.", NotificationSeverity.Error);
        Notify.ShowNotification(
            titulo: "Eliminado",
            mensaje: "Error al eliminar este registro",
            NotificationSeverity.Error);
      }
    }
    catch (Exception exception) { }

  }

  public bool Validar()
  {
    return categoria.Descripcion != null;
  }
}
